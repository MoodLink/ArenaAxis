// Component search bar v√† filters cho Community
// Bao g·ªìm search input, sort dropdown, sport filter, distance filter

import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Search, Filter } from "lucide-react"
import { CommunityFilterState } from "@/hooks/use-community-search-filter"

interface CommunitySearchBarProps {
    searchQuery: string
    onSearchChange: (value: string) => void
    selectedFilters: CommunityFilterState
    onFiltersChange: (filters: Partial<CommunityFilterState>) => void
    totalResults: number
    hasActiveFilters: boolean
}

export default function CommunitySearchBar({
    searchQuery,
    onSearchChange,
    selectedFilters,
    onFiltersChange,
    totalResults,
    hasActiveFilters
}: CommunitySearchBarProps) {
    const activeFiltersCount = [
        searchQuery,
        selectedFilters.sport !== "T·∫•t c·∫£" ? selectedFilters.sport : "",
        selectedFilters.distance !== "T·∫•t c·∫£" ? selectedFilters.distance : ""
    ].filter(Boolean).length

    return (
        <Card>
            <CardContent className="p-4">
                <div className="space-y-4">
                    {/* Main search bar */}
                    <div className="relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                        <input
                            type="text"
                            placeholder="T√¨m ki·∫øm ho·∫°t ƒë·ªông th·ªÉ thao..."
                            value={searchQuery}
                            onChange={(e) => onSearchChange(e.target.value)}
                            className="w-full pl-10 pr-4 py-3 border rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500"
                        />
                    </div>

                    {/* Filters row */}
                    <div className="flex flex-wrap gap-3 items-center">
                        {/* Sort dropdown */}
                        <select
                            value={selectedFilters.sortBy}
                            onChange={(e) => onFiltersChange({ sortBy: e.target.value as "newest" | "popular" | "trending" })}
                            className="px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                        >
                            <option value="newest">M·ªõi nh·∫•t</option>
                            <option value="popular">Ph·ªï bi·∫øn</option>
                            <option value="trending">Xu h∆∞·ªõng</option>
                        </select>

                        {/* Sport filter */}
                        <select
                            value={selectedFilters.sport}
                            onChange={(e) => onFiltersChange({ sport: e.target.value })}
                            className="px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                        >
                            <option value="T·∫•t c·∫£">T·∫•t c·∫£ m√¥n th·ªÉ thao</option>
                            <option value="Tennis">üéæ Tennis</option>
                            <option value="B√≥ng ƒë√°">‚öΩ B√≥ng ƒë√°</option>
                            <option value="C·∫ßu l√¥ng">üè∏ C·∫ßu l√¥ng</option>
                            <option value="B√≥ng r·ªï">üèÄ B√≥ng r·ªï</option>
                            <option value="B∆°i l·ªôi">üèä B∆°i l·ªôi</option>
                            <option value="Golf">‚õ≥ Golf</option>
                            <option value="B√≥ng chuy·ªÅn">üèê B√≥ng chuy·ªÅn</option>
                        </select>

                        {/* Distance filter */}
                        <select
                            value={selectedFilters.distance}
                            onChange={(e) => onFiltersChange({ distance: e.target.value })}
                            className="px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                        >
                            <option value="T·∫•t c·∫£">M·ªçi kho·∫£ng c√°ch</option>
                            <option value="< 1km">üìç D∆∞·ªõi 1km</option>
                            <option value="1-5km">üìç 1-5km</option>
                            <option value="5-10km">üìç 5-10km</option>
                            <option value="> 10km">üìç Tr√™n 10km</option>
                        </select>

                        {/* Active filters count */}
                        {activeFiltersCount > 0 && (
                            <Badge variant="secondary" className="bg-green-100 text-green-700">
                                <Filter className="w-3 h-3 mr-1" />
                                {activeFiltersCount} b·ªô l·ªçc
                            </Badge>
                        )}
                    </div>

                    {/* Results summary */}
                    <div className="pt-2 border-t border-gray-100">
                        <p className="text-sm text-gray-600">
                            {totalResults > 0 ? (
                                <>
                                    T√¨m th·∫•y <span className="font-semibold text-green-600">{totalResults}</span> ho·∫°t ƒë·ªông
                                    {searchQuery && ` cho "${searchQuery}"`}
                                    {hasActiveFilters && " (ƒë√£ l·ªçc)"}
                                </>
                            ) : (
                                "Kh√¥ng t√¨m th·∫•y ho·∫°t ƒë·ªông ph√π h·ª£p"
                            )}
                        </p>
                    </div>
                </div>
            </CardContent>
        </Card>
    )
}