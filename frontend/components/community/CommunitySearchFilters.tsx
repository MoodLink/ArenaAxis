// Component b·ªô l·ªçc t√¨m ki·∫øm cho trang c·ªông ƒë·ªìng
// Cho ph√©p t√¨m ki·∫øm theo t·ª´ kh√≥a, m√¥n th·ªÉ thao v√† kho·∫£ng c√°ch

import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { Search, Filter, MapPin, Trophy, Clock, X } from "lucide-react"

interface CommunitySearchFiltersProps {
    searchQuery: string // T·ª´ kh√≥a t√¨m ki·∫øm hi·ªán t·∫°i
    selectedSport: string // M√¥n th·ªÉ thao ƒë∆∞·ª£c ch·ªçn
    selectedDistance: string // Kho·∫£ng c√°ch ƒë∆∞·ª£c ch·ªçn
    onSearchQueryChange: (query: string) => void // Callback khi thay ƒë·ªïi t·ª´ kh√≥a
    onSportChange: (sport: string) => void // Callback khi thay ƒë·ªïi m√¥n th·ªÉ thao
    onDistanceChange: (distance: string) => void // Callback khi thay ƒë·ªïi kho·∫£ng c√°ch
}

export default function CommunitySearchFilters({
    searchQuery,
    selectedSport,
    selectedDistance,
    onSearchQueryChange,
    onSportChange,
    onDistanceChange
}: CommunitySearchFiltersProps) {
    // Danh s√°ch c√°c m√¥n th·ªÉ thao c√≥ s·∫µn v·ªõi emoji
    const sports = [
        { value: "T·∫•t c·∫£", label: "üèÜ T·∫•t c·∫£", color: "gray" },
        { value: "Tennis", label: "üéæ Tennis", color: "blue" },
        { value: "B√≥ng ƒë√°", label: "‚öΩ B√≥ng ƒë√°", color: "green" },
        { value: "C·∫ßu l√¥ng", label: "üè∏ C·∫ßu l√¥ng", color: "purple" },
        { value: "B√≥ng r·ªï", label: "üèÄ B√≥ng r·ªï", color: "orange" },
        { value: "B∆°i l·ªôi", label: "üèä‚Äç‚ôÇÔ∏è B∆°i l·ªôi", color: "cyan" },
        { value: "Ch·∫°y b·ªô", label: "üèÉ‚Äç‚ôÇÔ∏è Ch·∫°y b·ªô", color: "red" }
    ]

    // Danh s√°ch c√°c kho·∫£ng c√°ch c√≥ s·∫µn
    const distances = [
        { value: "T·∫•t c·∫£", label: "üìç M·ªçi kho·∫£ng c√°ch" },
        { value: "< 1km", label: "üìç D∆∞·ªõi 1km" },
        { value: "1-5km", label: "üìç 1-5km" },
        { value: "5-10km", label: "üìç 5-10km" },
        { value: "> 10km", label: "üìç Tr√™n 10km" }
    ]

    const activeFiltersCount = [
        searchQuery.trim() && "T·ª´ kh√≥a",
        selectedSport !== "T·∫•t c·∫£" && selectedSport,
        selectedDistance !== "T·∫•t c·∫£" && selectedDistance
    ].filter(Boolean).length

    const clearAllFilters = () => {
        onSearchQueryChange("")
        onSportChange("T·∫•t c·∫£")
        onDistanceChange("T·∫•t c·∫£")
    }

    return (
        <Card className="shadow-sm border border-gray-200">
            <CardContent className="p-6">
                <div className="space-y-6">
                    {/* Main search bar */}
                    <div className="relative">
                        <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                        <Input
                            placeholder="T√¨m ki·∫øm theo t√™n ho·∫°t ƒë·ªông, m√¥n th·ªÉ thao, ƒë·ªãa ƒëi·ªÉm..."
                            value={searchQuery}
                            onChange={(e) => onSearchQueryChange(e.target.value)}
                            className="pl-12 pr-4 h-12 text-base border-gray-300 focus:ring-2 focus:ring-green-500 focus:border-green-500 rounded-xl"
                        />
                        {searchQuery && (
                            <button
                                onClick={() => onSearchQueryChange("")}
                                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                            >
                                <X className="w-4 h-4" />
                            </button>
                        )}
                    </div>

                    {/* Quick filter chips */}
                    <div>
                        <div className="flex items-center justify-between mb-3">
                            <h4 className="text-sm font-semibold text-gray-700 flex items-center gap-2">
                                <Filter className="w-4 h-4" />
                                B·ªô l·ªçc nhanh
                            </h4>
                            {activeFiltersCount > 0 && (
                                <div className="flex items-center gap-2">
                                    <Badge className="bg-green-100 text-green-700">
                                        {activeFiltersCount} b·ªô l·ªçc
                                    </Badge>
                                    <button
                                        onClick={clearAllFilters}
                                        className="text-xs text-red-600 hover:text-red-700 font-medium"
                                    >
                                        X√≥a t·∫•t c·∫£
                                    </button>
                                </div>
                            )}
                        </div>

                        {/* Sport chips */}
                        <div className="mb-4">
                            <div className="flex items-center gap-2 mb-2">
                                <Trophy className="w-4 h-4 text-yellow-500" />
                                <span className="text-sm font-medium text-gray-700">M√¥n th·ªÉ thao:</span>
                            </div>
                            <div className="flex flex-wrap gap-2">
                                {sports.map((sport) => (
                                    <button
                                        key={sport.value}
                                        onClick={() => onSportChange(sport.value)}
                                        className={`px-3 py-2 text-sm rounded-lg border transition-all duration-200 ${selectedSport === sport.value
                                                ? "bg-green-100 text-green-700 border-green-300 font-medium"
                                                : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50 hover:border-gray-400"
                                            }`}
                                    >
                                        {sport.label}
                                    </button>
                                ))}
                            </div>
                        </div>

                        {/* Distance chips */}
                        <div>
                            <div className="flex items-center gap-2 mb-2">
                                <MapPin className="w-4 h-4 text-red-500" />
                                <span className="text-sm font-medium text-gray-700">Kho·∫£ng c√°ch:</span>
                            </div>
                            <div className="flex flex-wrap gap-2">
                                {distances.map((distance) => (
                                    <button
                                        key={distance.value}
                                        onClick={() => onDistanceChange(distance.value)}
                                        className={`px-3 py-2 text-sm rounded-lg border transition-all duration-200 ${selectedDistance === distance.value
                                                ? "bg-blue-100 text-blue-700 border-blue-300 font-medium"
                                                : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50 hover:border-gray-400"
                                            }`}
                                    >
                                        {distance.label}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* Active filters summary */}
                    {activeFiltersCount > 0 && (
                        <div className="pt-4 border-t border-gray-200">
                            <div className="flex items-center gap-2 text-sm text-gray-600">
                                <span className="font-medium">ƒêang l·ªçc:</span>
                                <div className="flex flex-wrap gap-2">
                                    {searchQuery && (
                                        <Badge variant="secondary" className="bg-green-50 text-green-700">
                                            "{searchQuery}"
                                        </Badge>
                                    )}
                                    {selectedSport !== "T·∫•t c·∫£" && (
                                        <Badge variant="secondary" className="bg-blue-50 text-blue-700">
                                            {selectedSport}
                                        </Badge>
                                    )}
                                    {selectedDistance !== "T·∫•t c·∫£" && (
                                        <Badge variant="secondary" className="bg-purple-50 text-purple-700">
                                            {selectedDistance}
                                        </Badge>
                                    )}
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </CardContent>
        </Card>
    )
}
